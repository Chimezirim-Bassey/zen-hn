"""
Django settings for zen_hn project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG")

ALLOWED_HOSTS = env.get_value("ALLOWED_HOSTS", default="*").split(" ")

# Application definition

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic", # add for serving static files in development
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # "whitenoise.runserver_nostatic", # add for serving static files in development
    "django.contrib.staticfiles",
    "django.contrib.sites", # add to use django-allauth

    # third-party apps
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    # for user registration with django-allauth
    "allauth",
    "allauth.account",
    "crispy_forms",
    "crispy_bootstrap5",
    "drf_spectacular", # add for OpenAPI schema

    # local apps
    "base",
    "user_account",
    "story",
    "job",
    "poll",
    "api",
    "home",
]

MIDDLEWARE = [
    # add for caching, runs during the response cycle must come after the other middlewares that might modify the response headers
    "django.middleware.cache.UpdateCacheMiddleware",
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware", # add for serving static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    "allauth.account.middleware.AccountMiddleware", # add for django-allauth
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # "django.contrib.sites.middleware.CurrentSiteMiddleware" # add for site framework

    # add for caching, runs during request and must come after the other middlewares that might modify the request headers
    "django.middleware.cache.FetchFromCacheMiddleware",
]

CORS_ALLOWED_ORIGINS = (
    "http://localhost:8000",
    "http://localhost:8002",
)

CSRF_TRUSTED_ORIGINS = (
    "http://localhost:8000",
    "http://localhost:8002",
)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },

    "filters":{
        # "special": {
        #     "()": "project.logging.SpecialFilter", # a custom filter
        #     "param": "value", # a custom parameter
        # },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        }
    },

    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "filters": ["require_debug_true"],
            "level": "INFO",
            "formatter": "simple",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["require_debug_true"],
        },
        "file":{
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs" / "django.log",
            "formatter": "verbose",
            "filters": ["require_debug_true"],
        }
    },

    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "propagate": True,
        },
        "django.request": {
            "handlers": ["mail_admins", "file"],
            "level": "ERROR",
            "propagate": True,
        },
    }
}

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
        # "rest_framework.permissions.IsAuthenticated", # remove this enable custom permission
    ],
    # add this to enable authentication with dj-rest-auth and rest_framework
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        # "rest_framework.authentication.BasicAuthentication",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema", # add for OpenAPI schema
}

ROOT_URLCONF = 'zen_hn.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"], # for templates. templates/registration for django_auth and templates/account for allauth
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "django.template.context_processors.request", # add for django-allauth
            ],
        },
    },
]

CACHE_ENGINES = {
    "pymemcache":{ # install memcache in your system
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": "127.0.0.1:11211", # memcached server can be a list of servers
        "OPTIONS": {
            "allow_unicode_keys": True, # allow unicode keys
            "default_noreply": False,
            # "serde": pymemcache.serde.pickle_serde
        }
    },

    "dummy": {
        "BACKEND": "django.core.cache.backends.dummy.DummyCache",
    },

    "local":{
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    },

    "redis":{
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"redis://{env('REDIS_HOST')}:{env('REDIS_PORT')}/0", # redis server
        "OPTIONS": {
            # "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            # "SERIALIZER": "django_redis.serializers.pickle.PickleSerializer",
            # "SERIALIZER": "django_redis.serializers.msgpack.MsgPackSerializer",
            # "SERIALIZER": "django_redis.serializers.yaml.YamlSerializer",
        }
    }
}

CACHES = {
    "default": CACHE_ENGINES[env.get_value("CACHE_ENGINE", default="pymemcache")],
}

CACHE_MIDDLEWARE_KEY_PREFIX = ""
CACHE_MIDDLEWARE_SECONDS = 120
CACHE_MIDDLEWARE_ALIAS = "default"

WSGI_APPLICATION = 'zen_hn.wsgi.application'

WHITENOISE_AUTOREFRESH = True
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASE_ENGINES = {
    "sqlite3": {"ENGINE": "django.db.backends.sqlite3", "NAME": BASE_DIR / env("SQLITE3_DB_NAME")},
    "postgresql":{
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("POSTGRES_DB"),
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "HOST": env("POSTGRES_DB_HOST"),
        "PORT": env("POSTGRES_DB_PORT"),
        # "CONN_HEALTH_CHECKS": True,
        "CONN_MAX_AGE": env.get_value("CONN_MAX_AGE", default=0), # should be 0 for development
    }
}

DATABASES = {
    'default': DATABASE_ENGINES[env('DATABASE_ENGINE')],
}

# OpenAPI schema settings
SPECTACULAR_SETTINGS = {
    "TITLE": "zen_hn API",
    "DESCRIPTION": "API for zen_hn",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": "/api/",
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Static Files
# storage engines

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        # "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage"
        # "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    }
}

# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage" # deprecated
# url to access static files
STATIC_URL = 'static/'
# for static files
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]
STATIC_ROOT = BASE_DIR / "staticfiles" # for collect static command to collect all static files in one directory
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    # looks for static files in the default storagefinder
    # "django.contrib.staticfiles.finders.DefaultStorageFinder"
]
# crispy
CRISPY_TEMPLATE_PACK = 'bootstrap5'
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
# CRISPY_TEMPLATE_PACK = 'uni_form'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = "user_account.User"

SITE_ID = 2

ACCOUNT_SESSION_REMEMBER = True # allauth setting to remember user session

LOGIN_REDIRECT_URL = "home" # contrib.auth setting for redirect after login same as next_page in login view works for django-allauth
LOGOUT_REDIRECT_URL = "home" # contrib.auth setting for redirect after logout same as next_page in logout view works for django-allauth

# these settings are for django-allauth to use email instead of username
# ACCOUNT_USERNAME_REQUIRED = False # no longer required use ACCOUNT_SIGNUP_FIELDS
# ACCOUNT_AUTHENTICATION_METHOD = "email" # new deprecated
# ACCOUNT_EMAIL_REQUIRED = True # no longer required use ACCOUNT_SIGNUP_FIELDS
# ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False allauth setting to enter password twice during signup. no longer needed
ACCOUNT_LOGIN_METHODS = {"email", "username"}
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_SIGNUP_FIELDS = ["email*", "username*", "password1*", "password2*"] # new

# add for email verification with django-allauth
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend" # simple console backend
# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend" # smtp email backend
# EMAIL_BACKEND = "user_account.email_backend.CeleryEmailBackend" # custom backend when using celery
EMAIL_BACKEND = env.get_value("EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend")
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_PORT = env("EMAIL_PORT")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL")
# EMAIL_USE_TLS = env("EMAIL_USE_TLS")
EMAIL_USE_SSL = env("EMAIL_USE_SSL")

# media uploaded files
MEDIA_URL = "/media/" # is the URL we can use in our templates for the files
MEDIA_ROOT = BASE_DIR / "media" # is the absolute file system path to the directory for user-uploaded files

# celery
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_ACCEPT_CONTENT = ['json', 'pickle']
CELERY_BROKER_URL = f"redis://{env('REDIS_HOST')}:{env('REDIS_PORT')}/0" # redis broker
CELERY_TASK_SERIALIZER = 'pickle' # default is json, but it won't work with email messages
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
